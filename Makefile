# Generated by Assemblage for octavius-lib version-not-set.

# Run `make help' to get the list of targets.

.PHONY: all clean lib bin test doc distclean js help lib-octavius

# 
# Main project configuration
# 

BUILDIR     ?= _build
DUMPAST     ?= ocaml-dumpast
JS_OF_OCAML ?= js_of_ocaml
LIBDIR      ?= $(LIBDIR)
LN          ?= ln -sf
MKDIR       ?= mkdir -p
OCAMLMKLIB  ?= ocamlmklib
ROOTDIR     = $(shell pwd)
ifeq ($(HAS_NATIVE_TOOLCHAIN:true=),)
OCAMLC      ?= ocamlc.opt
OCAMLDEP    ?= ocamldep.opt
OCAMLDOC    ?= ocamldoc.opt
OCAMLOPT    ?= ocamlopt.opt
else
OCAMLC      ?= ocamlc
OCAMLDEP    ?= ocamldep
OCAMLDOC    ?= ocamldoc
OCAMLOPT    ?= ocamlopt
endif
OCAMLYACC   ?= ocamlyacc
OCAMLLEX    ?= ocamllex

HAS_ANNOT            ?= true
HAS_BYTE             ?= true
HAS_DEBUG            ?= true
HAS_DOC              ?= false
HAS_JS               ?= false
HAS_NATIVE           ?= true
HAS_NATIVE_DYNLINK   ?= true
HAS_NATIVE_TOOLCHAIN ?= true
HAS_TEST             ?= false
HAS_WARN_ERROR       ?= false

# 
# Global variables
# 

all            := lib
compile-byte   := 
compile-native := 
link-byte      := 
link-native    := 
ifeq ($(HAS_WARN_ERROR:true=),)
compile-byte   += -warn-error A-44-4-48 -w A-44-4-48
endif
ifeq ($(HAS_DEBUG:true=),)
compile-byte   += -g
compile-native += -g
link-byte      += -g
link-native    += -g
endif
ifeq ($(HAS_ANNOT:true=),)
compile-byte   += -bin-annot
endif

# 
# Component configuration.
# 
# Each component has variables associated to the different phases of the build.
# <NAME>.<PHASE> controls the compilation options for the component <NAME>,
# during the phase <PHASE>.
# 

lib := lib-octavius

# Library: octavius
lib-octavius := 
ifeq ($(HAS_BYTE:true=),)
lib-octavius += $(BUILDIR)/lib-octavius/octavius.cma
endif
ifeq ($(HAS_NATIVE:true=),)
lib-octavius +=  \
    $(BUILDIR)/lib-octavius/octavius.a \
    $(BUILDIR)/lib-octavius/octavius.cmxa
endif
ifeq ($(HAS_NATIVE:true=)$(HAS_NATIVE_DYNLINK:true=),)
lib-octavius += $(BUILDIR)/lib-octavius/octavius.cmxs
endif
lib-octavius.archive-byte ?=  \
    $(archive-byte) \
    -a \
    $(BUILDIR)/lib-octavius/octErrors.cmo \
    $(BUILDIR)/lib-octavius/octPrint.cmo \
    $(BUILDIR)/lib-octavius/octCommon.cmo \
    $(BUILDIR)/lib-octavius/octParser.cmo \
    $(BUILDIR)/lib-octavius/octLexer.cmo \
    $(BUILDIR)/lib-octavius/octavius.cmo
lib-octavius.archive-native ?=  \
    $(archive-native) \
    -a \
    $(BUILDIR)/lib-octavius/octErrors.cmx \
    $(BUILDIR)/lib-octavius/octPrint.cmx \
    $(BUILDIR)/lib-octavius/octCommon.cmx \
    $(BUILDIR)/lib-octavius/octParser.cmx \
    $(BUILDIR)/lib-octavius/octLexer.cmx \
    $(BUILDIR)/lib-octavius/octavius.cmx
lib-octavius.archive-shared ?=  \
    $(archive-shared) \
    -shared \
    -linkall \
    $(BUILDIR)/lib-octavius/octErrors.cmx \
    $(BUILDIR)/lib-octavius/octPrint.cmx \
    $(BUILDIR)/lib-octavius/octCommon.cmx \
    $(BUILDIR)/lib-octavius/octParser.cmx \
    $(BUILDIR)/lib-octavius/octLexer.cmx \
    $(BUILDIR)/lib-octavius/octavius.cmx
lib-octavius.compile-byte ?=  \
    $(compile-byte) \
    -I $(BUILDIR)/lib-octavius
lib-octavius.compile-native ?=  \
    $(compile-native) \
    -I $(BUILDIR)/lib-octavius
lib-octavius.dep ?=  \
    $(dep) \
    -I $(BUILDIR)/lib-octavius
lib-octavius.pp-byte ?= $(pp-byte)
lib-octavius.pp-native ?= $(pp-native)

bin := 

js := 

test := 

doc := 

# Compilation unit: src/octTypes
unit-octTypes-lib-octavius.compile-byte ?= $(lib-octavius.compile-byte)
unit-octTypes-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octTypes-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octTypes-lib-octavius.pp-native ?= $(lib-octavius.pp-native)

# Compilation unit: src/octErrors
unit-octErrors-lib-octavius.compile-byte ?= $(lib-octavius.compile-byte)
unit-octErrors-lib-octavius.compile-native ?= $(lib-octavius.compile-native)
unit-octErrors-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octErrors-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octErrors-lib-octavius.pp-native ?= $(lib-octavius.pp-native)

# Compilation unit: src/octParser
unit-octParser-lib-octavius.compile-byte ?= $(lib-octavius.compile-byte)
unit-octParser-lib-octavius.compile-native ?= $(lib-octavius.compile-native)
unit-octParser-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octParser-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octParser-lib-octavius.pp-native ?= $(lib-octavius.pp-native)

# Compilation unit: src/octLexer
unit-octLexer-lib-octavius.compile-byte ?= $(lib-octavius.compile-byte)
unit-octLexer-lib-octavius.compile-native ?= $(lib-octavius.compile-native)
unit-octLexer-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octLexer-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octLexer-lib-octavius.pp-native ?= $(lib-octavius.pp-native)

# Compilation unit: src/octCommon
unit-octCommon-lib-octavius.compile-byte ?= $(lib-octavius.compile-byte)
unit-octCommon-lib-octavius.compile-native ?= $(lib-octavius.compile-native)
unit-octCommon-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octCommon-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octCommon-lib-octavius.pp-native ?= $(lib-octavius.pp-native)

# Compilation unit: src/octPrint
unit-octPrint-lib-octavius.compile-byte ?= $(lib-octavius.compile-byte)
unit-octPrint-lib-octavius.compile-native ?= $(lib-octavius.compile-native)
unit-octPrint-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octPrint-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octPrint-lib-octavius.pp-native ?= $(lib-octavius.pp-native)

# Compilation unit: src/octavius
unit-octavius-lib-octavius.compile-byte ?=  \
    $(lib-octavius.compile-byte) \
    -no-alias-deps
unit-octavius-lib-octavius.compile-native ?=  \
    $(lib-octavius.compile-native) \
    -no-alias-deps
unit-octavius-lib-octavius.dep ?= $(lib-octavius.dep)
unit-octavius-lib-octavius.pp-byte ?= $(lib-octavius.pp-byte)
unit-octavius-lib-octavius.pp-native ?= $(lib-octavius.pp-native)


all:: 
	@echo '[04mall[m [1;34m=>[m ${all}'
	@$(MAKE) $(all)
	@if [ "x${HAS_JS}" = "x1" ]; then $(MAKE) js; fi
	@if [ "x${HAS_TEST}" = "x1" ]; then $(MAKE) test; fi
	@if [ "x${HAS_DOC}" = "x1" ]; then $(MAKE) doc; fi
	@if [ "x${HAS_FULL_DOC}" = "x1" ]; then $(MAKE) full-doc; fi
	@echo '[32m==>[m Done!'

clean:: 
	rm -f *~ **/*~
	rm -rf $(BUILDIR)

distclean:: clean
	rm -f Makefile octavius.install META .merlin

install:: all
	@opam-installer --prefix $(shell opam config var prefix) octavius.install

help: 
	@echo 'Use [04mVERBOSE=true[m to show the full commands.'
	@echo 'The following targets are available (use "make [04m<target>[m"):'
	@echo
	@echo ' - [04mall[m -- build all the active targets.'
	@echo ' - [04mlib-octavius[m -- build the library octavius.'
	@echo ' - [04mdoc[m -- build the documentation.'
	@echo ' - [04mtest[m -- build and run the test.'
	@echo ' - [04mjs[m -- build the js_of_ocaml targets.'
	@echo ' - [04mclean[m -- clean the build artefacts.'
	@echo ' - [04mdistclean[m -- clean the project to prepare the release.'
	@echo
	@echo
	@echo 'Current configuration (use "make [04mVAR=BOOL[m" to modify):'
	@echo
	@echo ' - [04mHAS_ANNOT=$(HAS_ANNOT)[m -- Build OCaml binary annotations files.'
	@echo ' - [04mHAS_BYTE=$(HAS_BYTE)[m -- Byte code OCaml compilation is available.'
	@echo ' - [04mHAS_DEBUG=$(HAS_DEBUG)[m -- Build with debugging support.'
	@echo ' - [04mHAS_DOC=$(HAS_DOC)[m -- Build the documentation.'
	@echo ' - [04mHAS_JS=$(HAS_JS)[m -- JavaScript code OCaml compilation with js_of_ocaml is available.'
	@echo ' - [04mHAS_NATIVE=$(HAS_NATIVE)[m -- Native code OCaml compilation is available.'
	@echo ' - [04mHAS_NATIVE_DYNLINK=$(HAS_NATIVE_DYNLINK)[m -- Native code OCaml dynamic linking is available.'
	@echo ' - [04mHAS_NATIVE_TOOLCHAIN=$(HAS_NATIVE_TOOLCHAIN)[m -- The native compiled OCaml toolchain is available (.opt tools).'
	@echo ' - [04mHAS_TEST=$(HAS_TEST)[m -- Build the tests.'
	@echo ' - [04mHAS_WARN_ERROR=$(HAS_WARN_ERROR)[m -- Build with warnings as errors.'
	@echo

lib: $(lib)
	@

lib-octavius: $(lib-octavius)
	@

$(BUILDIR)/lib-octavius/: 
	@if test -n "$$VERBOSE"; \
        then echo '$(MKDIR) $(BUILDIR)/lib-octavius'; \
        else echo 'lib-octavius              [32m<=[m [01mprepare[m lib-octavius'; fi
	@$(MKDIR) $(BUILDIR)/lib-octavius

$(BUILDIR)/lib-octavius/octavius.cma:  \
    $(BUILDIR)/lib-octavius/octErrors.cmo \
    $(BUILDIR)/lib-octavius/octPrint.cmo \
    $(BUILDIR)/lib-octavius/octCommon.cmo \
    $(BUILDIR)/lib-octavius/octParser.cmo \
    $(BUILDIR)/lib-octavius/octLexer.cmo \
    $(BUILDIR)/lib-octavius/octavius.cmo \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) $(lib-octavius.archive-byte) -o $(BUILDIR)/lib-octavius/octavius.cma'; \
        else echo 'octavius.cma              [32m<=[m [01marchive-byte[m lib-octavius'; fi
	@$(OCAMLC) $(lib-octavius.archive-byte) -o $(BUILDIR)/lib-octavius/octavius.cma

$(BUILDIR)/lib-octavius/octavius.cmxa $(BUILDIR)/lib-octavius/octavius.a:  \
    $(BUILDIR)/lib-octavius/octErrors.cmx \
    $(BUILDIR)/lib-octavius/octPrint.cmx \
    $(BUILDIR)/lib-octavius/octCommon.cmx \
    $(BUILDIR)/lib-octavius/octParser.cmx \
    $(BUILDIR)/lib-octavius/octLexer.cmx \
    $(BUILDIR)/lib-octavius/octavius.cmx \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(lib-octavius.archive-native) -o $(BUILDIR)/lib-octavius/octavius.cmxa'; \
        else echo 'octavius.cmxa octavius.a  [32m<=[m [01marchive-native[m lib-octavius'; fi
	@$(OCAMLOPT) $(lib-octavius.archive-native) -o $(BUILDIR)/lib-octavius/octavius.cmxa

$(BUILDIR)/lib-octavius/octavius.cmxs:  \
    $(BUILDIR)/lib-octavius/octErrors.cmx \
    $(BUILDIR)/lib-octavius/octPrint.cmx \
    $(BUILDIR)/lib-octavius/octCommon.cmx \
    $(BUILDIR)/lib-octavius/octParser.cmx \
    $(BUILDIR)/lib-octavius/octLexer.cmx \
    $(BUILDIR)/lib-octavius/octavius.cmx \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) $(lib-octavius.archive-shared) -o $(BUILDIR)/lib-octavius/octavius.cmxs'; \
        else echo 'octavius.cmxs             [32m<=[m [01marchive-shared[m lib-octavius'; fi
	@$(OCAMLOPT) $(lib-octavius.archive-shared) -o $(BUILDIR)/lib-octavius/octavius.cmxs

bin: $(bin)
	@

js: $(js)
	@

test: $(test)
	@

doc: $(doc)
	@

$(BUILDIR)/lib-octavius/octTypes.mli: src/octTypes.mli \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octTypes.mli $(BUILDIR)/lib-octavius/octTypes.mli'; \
        else echo 'octTypes.mli              [32m<=[m [01mprepare[m unit-octTypes-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octTypes.mli $(BUILDIR)/lib-octavius/octTypes.mli

$(BUILDIR)/lib-octavius/octTypes.cmli-byte: $(BUILDIR)/lib-octavius/octTypes.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octTypes.mli $(BUILDIR)/lib-octavius/octTypes.cmli-byte'; \
        else echo 'octTypes.cmli-byte        [32m<=[m [01mpp-byte[m unit-octTypes-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octTypes.mli $(BUILDIR)/lib-octavius/octTypes.cmli-byte

$(BUILDIR)/lib-octavius/octTypes.cmli-native: $(BUILDIR)/lib-octavius/octTypes.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octTypes.mli $(BUILDIR)/lib-octavius/octTypes.cmli-native'; \
        else echo 'octTypes.cmli-native      [32m<=[m [01mpp-native[m unit-octTypes-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octTypes.mli $(BUILDIR)/lib-octavius/octTypes.cmli-native

$(BUILDIR)/lib-octavius/octTypes.mli.d: $(BUILDIR)/lib-octavius/octTypes.cmli-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octTypes-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octTypes.cmli-byte > $(BUILDIR)/lib-octavius/octTypes.mli.d'; \
        else echo 'octTypes.mli.d            [32m<=[m [01mdep[m unit-octTypes-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octTypes-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octTypes.cmli-byte > $(BUILDIR)/lib-octavius/octTypes.mli.d

$(BUILDIR)/lib-octavius/octTypes.cmi:  \
    $(BUILDIR)/lib-octavius/octTypes.cmli-byte \
    $(BUILDIR)/lib-octavius/octTypes.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octTypes-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octTypes.cmli-byte'; \
        else echo 'octTypes.cmi              [32m<=[m [01mcompile-byte[m unit-octTypes-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octTypes-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octTypes.cmli-byte

$(BUILDIR)/lib-octavius/octErrors.mli: src/octErrors.mli \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octErrors.mli $(BUILDIR)/lib-octavius/octErrors.mli'; \
        else echo 'octErrors.mli             [32m<=[m [01mprepare[m unit-octErrors-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octErrors.mli $(BUILDIR)/lib-octavius/octErrors.mli

$(BUILDIR)/lib-octavius/octErrors.cmli-byte: $(BUILDIR)/lib-octavius/octErrors.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.mli $(BUILDIR)/lib-octavius/octErrors.cmli-byte'; \
        else echo 'octErrors.cmli-byte       [32m<=[m [01mpp-byte[m unit-octErrors-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.mli $(BUILDIR)/lib-octavius/octErrors.cmli-byte

$(BUILDIR)/lib-octavius/octErrors.cmli-native: $(BUILDIR)/lib-octavius/octErrors.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.mli $(BUILDIR)/lib-octavius/octErrors.cmli-native'; \
        else echo 'octErrors.cmli-native     [32m<=[m [01mpp-native[m unit-octErrors-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.mli $(BUILDIR)/lib-octavius/octErrors.cmli-native

$(BUILDIR)/lib-octavius/octErrors.mli.d: $(BUILDIR)/lib-octavius/octErrors.cmli-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octErrors-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octErrors.cmli-byte > $(BUILDIR)/lib-octavius/octErrors.mli.d'; \
        else echo 'octErrors.mli.d           [32m<=[m [01mdep[m unit-octErrors-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octErrors-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octErrors.cmli-byte > $(BUILDIR)/lib-octavius/octErrors.mli.d

$(BUILDIR)/lib-octavius/octErrors.cmi:  \
    $(BUILDIR)/lib-octavius/octErrors.cmli-byte \
    $(BUILDIR)/lib-octavius/octErrors.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octErrors-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octErrors.cmli-byte'; \
        else echo 'octErrors.cmi             [32m<=[m [01mcompile-byte[m unit-octErrors-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octErrors-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octErrors.cmli-byte

$(BUILDIR)/lib-octavius/octErrors.ml: src/octErrors.ml \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octErrors.ml $(BUILDIR)/lib-octavius/octErrors.ml'; \
        else echo 'octErrors.ml              [32m<=[m [01mprepare[m unit-octErrors-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octErrors.ml $(BUILDIR)/lib-octavius/octErrors.ml

$(BUILDIR)/lib-octavius/octErrors.cml-byte: $(BUILDIR)/lib-octavius/octErrors.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.ml $(BUILDIR)/lib-octavius/octErrors.cml-byte'; \
        else echo 'octErrors.cml-byte        [32m<=[m [01mpp-byte[m unit-octErrors-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.ml $(BUILDIR)/lib-octavius/octErrors.cml-byte

$(BUILDIR)/lib-octavius/octErrors.cml-native: $(BUILDIR)/lib-octavius/octErrors.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.ml $(BUILDIR)/lib-octavius/octErrors.cml-native'; \
        else echo 'octErrors.cml-native      [32m<=[m [01mpp-native[m unit-octErrors-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octErrors.ml $(BUILDIR)/lib-octavius/octErrors.cml-native

$(BUILDIR)/lib-octavius/octErrors.ml.d: $(BUILDIR)/lib-octavius/octErrors.cml-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octErrors-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octErrors.cml-byte > $(BUILDIR)/lib-octavius/octErrors.ml.d'; \
        else echo 'octErrors.ml.d            [32m<=[m [01mdep[m unit-octErrors-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octErrors-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octErrors.cml-byte > $(BUILDIR)/lib-octavius/octErrors.ml.d

$(BUILDIR)/lib-octavius/octErrors.cmo:  \
    $(BUILDIR)/lib-octavius/octErrors.ml.d \
    $(BUILDIR)/lib-octavius/octErrors.cml-byte \
    $(BUILDIR)/lib-octavius/octErrors.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octErrors-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octErrors.cml-byte'; \
        else echo 'octErrors.cmo             [32m<=[m [01mcompile-byte[m unit-octErrors-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octErrors-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octErrors.cml-byte

$(BUILDIR)/lib-octavius/octErrors.cmx:  \
    $(BUILDIR)/lib-octavius/octErrors.ml.d \
    $(BUILDIR)/lib-octavius/octErrors.cmi \
    $(BUILDIR)/lib-octavius/octErrors.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-octErrors-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octErrors.cml-native'; \
        else echo 'octErrors.cmx             [32m<=[m [01mcompile-native[m unit-octErrors-lib-octavius'; fi
	@$(OCAMLOPT) -c $(unit-octErrors-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octErrors.cml-native

$(BUILDIR)/lib-octavius/octCommon.mli: src/octCommon.mli \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octCommon.mli $(BUILDIR)/lib-octavius/octCommon.mli'; \
        else echo 'octCommon.mli             [32m<=[m [01mprepare[m unit-octCommon-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octCommon.mli $(BUILDIR)/lib-octavius/octCommon.mli

$(BUILDIR)/lib-octavius/octCommon.cmli-byte: $(BUILDIR)/lib-octavius/octCommon.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.mli $(BUILDIR)/lib-octavius/octCommon.cmli-byte'; \
        else echo 'octCommon.cmli-byte       [32m<=[m [01mpp-byte[m unit-octCommon-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.mli $(BUILDIR)/lib-octavius/octCommon.cmli-byte

$(BUILDIR)/lib-octavius/octCommon.cmli-native: $(BUILDIR)/lib-octavius/octCommon.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.mli $(BUILDIR)/lib-octavius/octCommon.cmli-native'; \
        else echo 'octCommon.cmli-native     [32m<=[m [01mpp-native[m unit-octCommon-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.mli $(BUILDIR)/lib-octavius/octCommon.cmli-native

$(BUILDIR)/lib-octavius/octCommon.mli.d: $(BUILDIR)/lib-octavius/octCommon.cmli-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octCommon-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octCommon.cmli-byte > $(BUILDIR)/lib-octavius/octCommon.mli.d'; \
        else echo 'octCommon.mli.d           [32m<=[m [01mdep[m unit-octCommon-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octCommon-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octCommon.cmli-byte > $(BUILDIR)/lib-octavius/octCommon.mli.d

$(BUILDIR)/lib-octavius/octCommon.cmi:  \
    $(BUILDIR)/lib-octavius/octCommon.cmli-byte \
    $(BUILDIR)/lib-octavius/octCommon.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octCommon-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octCommon.cmli-byte'; \
        else echo 'octCommon.cmi             [32m<=[m [01mcompile-byte[m unit-octCommon-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octCommon-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octCommon.cmli-byte

$(BUILDIR)/lib-octavius/octCommon.ml: src/octCommon.ml \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octCommon.ml $(BUILDIR)/lib-octavius/octCommon.ml'; \
        else echo 'octCommon.ml              [32m<=[m [01mprepare[m unit-octCommon-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octCommon.ml $(BUILDIR)/lib-octavius/octCommon.ml

$(BUILDIR)/lib-octavius/octCommon.cml-byte: $(BUILDIR)/lib-octavius/octCommon.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.ml $(BUILDIR)/lib-octavius/octCommon.cml-byte'; \
        else echo 'octCommon.cml-byte        [32m<=[m [01mpp-byte[m unit-octCommon-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.ml $(BUILDIR)/lib-octavius/octCommon.cml-byte

$(BUILDIR)/lib-octavius/octCommon.cml-native: $(BUILDIR)/lib-octavius/octCommon.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.ml $(BUILDIR)/lib-octavius/octCommon.cml-native'; \
        else echo 'octCommon.cml-native      [32m<=[m [01mpp-native[m unit-octCommon-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octCommon.ml $(BUILDIR)/lib-octavius/octCommon.cml-native

$(BUILDIR)/lib-octavius/octCommon.ml.d: $(BUILDIR)/lib-octavius/octCommon.cml-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octCommon-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octCommon.cml-byte > $(BUILDIR)/lib-octavius/octCommon.ml.d'; \
        else echo 'octCommon.ml.d            [32m<=[m [01mdep[m unit-octCommon-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octCommon-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octCommon.cml-byte > $(BUILDIR)/lib-octavius/octCommon.ml.d

$(BUILDIR)/lib-octavius/octCommon.cmo:  \
    $(BUILDIR)/lib-octavius/octCommon.ml.d \
    $(BUILDIR)/lib-octavius/octCommon.cml-byte \
    $(BUILDIR)/lib-octavius/octCommon.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octCommon-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octCommon.cml-byte'; \
        else echo 'octCommon.cmo             [32m<=[m [01mcompile-byte[m unit-octCommon-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octCommon-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octCommon.cml-byte

$(BUILDIR)/lib-octavius/octCommon.cmx:  \
    $(BUILDIR)/lib-octavius/octCommon.ml.d \
    $(BUILDIR)/lib-octavius/octCommon.cmi \
    $(BUILDIR)/lib-octavius/octCommon.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-octCommon-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octCommon.cml-native'; \
        else echo 'octCommon.cmx             [32m<=[m [01mcompile-native[m unit-octCommon-lib-octavius'; fi
	@$(OCAMLOPT) -c $(unit-octCommon-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octCommon.cml-native

$(BUILDIR)/lib-octavius/octPrint.mli: src/octPrint.mli \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octPrint.mli $(BUILDIR)/lib-octavius/octPrint.mli'; \
        else echo 'octPrint.mli              [32m<=[m [01mprepare[m unit-octPrint-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octPrint.mli $(BUILDIR)/lib-octavius/octPrint.mli

$(BUILDIR)/lib-octavius/octPrint.cmli-byte: $(BUILDIR)/lib-octavius/octPrint.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.mli $(BUILDIR)/lib-octavius/octPrint.cmli-byte'; \
        else echo 'octPrint.cmli-byte        [32m<=[m [01mpp-byte[m unit-octPrint-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.mli $(BUILDIR)/lib-octavius/octPrint.cmli-byte

$(BUILDIR)/lib-octavius/octPrint.cmli-native: $(BUILDIR)/lib-octavius/octPrint.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.mli $(BUILDIR)/lib-octavius/octPrint.cmli-native'; \
        else echo 'octPrint.cmli-native      [32m<=[m [01mpp-native[m unit-octPrint-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.mli $(BUILDIR)/lib-octavius/octPrint.cmli-native

$(BUILDIR)/lib-octavius/octPrint.mli.d: $(BUILDIR)/lib-octavius/octPrint.cmli-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octPrint-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octPrint.cmli-byte > $(BUILDIR)/lib-octavius/octPrint.mli.d'; \
        else echo 'octPrint.mli.d            [32m<=[m [01mdep[m unit-octPrint-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octPrint-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octPrint.cmli-byte > $(BUILDIR)/lib-octavius/octPrint.mli.d

$(BUILDIR)/lib-octavius/octPrint.cmi:  \
    $(BUILDIR)/lib-octavius/octPrint.cmli-byte \
    $(BUILDIR)/lib-octavius/octPrint.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octPrint-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octPrint.cmli-byte'; \
        else echo 'octPrint.cmi              [32m<=[m [01mcompile-byte[m unit-octPrint-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octPrint-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octPrint.cmli-byte

$(BUILDIR)/lib-octavius/octPrint.ml: src/octPrint.ml \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octPrint.ml $(BUILDIR)/lib-octavius/octPrint.ml'; \
        else echo 'octPrint.ml               [32m<=[m [01mprepare[m unit-octPrint-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octPrint.ml $(BUILDIR)/lib-octavius/octPrint.ml

$(BUILDIR)/lib-octavius/octPrint.cml-byte: $(BUILDIR)/lib-octavius/octPrint.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.ml $(BUILDIR)/lib-octavius/octPrint.cml-byte'; \
        else echo 'octPrint.cml-byte         [32m<=[m [01mpp-byte[m unit-octPrint-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.ml $(BUILDIR)/lib-octavius/octPrint.cml-byte

$(BUILDIR)/lib-octavius/octPrint.cml-native: $(BUILDIR)/lib-octavius/octPrint.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.ml $(BUILDIR)/lib-octavius/octPrint.cml-native'; \
        else echo 'octPrint.cml-native       [32m<=[m [01mpp-native[m unit-octPrint-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octPrint.ml $(BUILDIR)/lib-octavius/octPrint.cml-native

$(BUILDIR)/lib-octavius/octPrint.ml.d: $(BUILDIR)/lib-octavius/octPrint.cml-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octPrint-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octPrint.cml-byte > $(BUILDIR)/lib-octavius/octPrint.ml.d'; \
        else echo 'octPrint.ml.d             [32m<=[m [01mdep[m unit-octPrint-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octPrint-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octPrint.cml-byte > $(BUILDIR)/lib-octavius/octPrint.ml.d

$(BUILDIR)/lib-octavius/octPrint.cmo:  \
    $(BUILDIR)/lib-octavius/octPrint.ml.d \
    $(BUILDIR)/lib-octavius/octPrint.cml-byte \
    $(BUILDIR)/lib-octavius/octPrint.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octPrint-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octPrint.cml-byte'; \
        else echo 'octPrint.cmo              [32m<=[m [01mcompile-byte[m unit-octPrint-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octPrint-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octPrint.cml-byte

$(BUILDIR)/lib-octavius/octPrint.cmx:  \
    $(BUILDIR)/lib-octavius/octPrint.ml.d \
    $(BUILDIR)/lib-octavius/octPrint.cmi \
    $(BUILDIR)/lib-octavius/octPrint.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-octPrint-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octPrint.cml-native'; \
        else echo 'octPrint.cmx              [32m<=[m [01mcompile-native[m unit-octPrint-lib-octavius'; fi
	@$(OCAMLOPT) -c $(unit-octPrint-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octPrint.cml-native

$(BUILDIR)/lib-octavius/octParser.mly: src/octParser.mly \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octParser.mly $(BUILDIR)/lib-octavius/octParser.mly'; \
        else echo 'octParser.mly               [32m<=[m [01mprepare[m unit-octParser-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octParser.mly $(BUILDIR)/lib-octavius/octParser.mly

$(BUILDIR)/lib-octavius/octParser.ml $(BUILDIR)/lib-octavius/octParser.mli:  \
    $(BUILDIR)/lib-octavius/octParser.mly
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLYACC) $(BUILDIR)/lib-octavius/octParser.mly'; \
        else echo 'octParser.ml               [32m<=[m [01mprepare[m unit-octParser-lib-octavius'; fi
	@$(OCAMLYACC) $(BUILDIR)/lib-octavius/octParser.mly

$(BUILDIR)/lib-octavius/octParser.mli.d: $(BUILDIR)/lib-octavius/octParser.mli \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octParser-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octParser.mli > $(BUILDIR)/lib-octavius/octParser.mli.d'; \
        else echo 'octParser.mli.d            [32m<=[m [01mdep[m unit-octParser-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octParser-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octParser.mli > $(BUILDIR)/lib-octavius/octParser.mli.d

$(BUILDIR)/lib-octavius/octParser.cmi:  \
    $(BUILDIR)/lib-octavius/octParser.mli \
    $(BUILDIR)/lib-octavius/octParser.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octParser-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octParser.mli'; \
        else echo 'octParser.cmi              [32m<=[m [01mcompile-byte[m unit-octParser-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octParser-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octParser.mli

$(BUILDIR)/lib-octavius/octParser.ml.d: $(BUILDIR)/lib-octavius/octParser.ml \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octParser.mli \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octParser-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octParser.ml > $(BUILDIR)/lib-octavius/octParser.ml.d'; \
        else echo 'octParser.ml.d             [32m<=[m [01mdep[m unit-octParser-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octParser-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octParser.ml > $(BUILDIR)/lib-octavius/octParser.ml.d

$(BUILDIR)/lib-octavius/octParser.cmo:  \
    $(BUILDIR)/lib-octavius/octParser.ml.d \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octParser.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octParser-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octParser.ml'; \
        else echo 'octParser.cmo              [32m<=[m [01mcompile-byte[m unit-octParser-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octParser-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octParser.ml

$(BUILDIR)/lib-octavius/octParser.cmx:  \
    $(BUILDIR)/lib-octavius/octParser.ml.d \
    $(BUILDIR)/lib-octavius/octParser.cmi \
    $(BUILDIR)/lib-octavius/octParser.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-octParser-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octParser.ml'; \
        else echo 'octParser.cmx              [32m<=[m [01mcompile-native[m unit-octParser-lib-octavius'; fi
	@$(OCAMLOPT) -c $(unit-octParser-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octParser.ml

$(BUILDIR)/lib-octavius/octLexer.mll: src/octLexer.mll \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octLexer.mll $(BUILDIR)/lib-octavius/octLexer.mll'; \
        else echo 'octLexer.mll               [32m<=[m [01mprepare[m unit-octLexer-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octLexer.mll $(BUILDIR)/lib-octavius/octLexer.mll

$(BUILDIR)/lib-octavius/octLexer.ml:  \
    $(BUILDIR)/lib-octavius/octLexer.mll
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLLEX) $(BUILDIR)/lib-octavius/octLexer.mll'; \
        else echo 'octLexer.ml               [32m<=[m [01mprepare[m unit-octLexer-lib-octavius'; fi
	@$(OCAMLLEX) $(BUILDIR)/lib-octavius/octLexer.mll

$(BUILDIR)/lib-octavius/octLexer.mli: src/octLexer.mli \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octLexer.mli $(BUILDIR)/lib-octavius/octLexer.mli'; \
        else echo 'octLexer.mli               [32m<=[m [01mprepare[m unit-octLexer-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octLexer.mli $(BUILDIR)/lib-octavius/octLexer.mli

$(BUILDIR)/lib-octavius/octLexer.mli.d: $(BUILDIR)/lib-octavius/octLexer.mli \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octLexer-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octLexer.mli > $(BUILDIR)/lib-octavius/octLexer.mli.d'; \
        else echo 'octLexer.mli.d            [32m<=[m [01mdep[m unit-octLexer-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octLexer-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octLexer.mli > $(BUILDIR)/lib-octavius/octLexer.mli.d

$(BUILDIR)/lib-octavius/octLexer.cmi:  \
    $(BUILDIR)/lib-octavius/octLexer.mli \
    $(BUILDIR)/lib-octavius/octLexer.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octLexer-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octLexer.mli'; \
        else echo 'octLexer.cmi              [32m<=[m [01mcompile-byte[m unit-octLexer-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octLexer-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octLexer.mli

$(BUILDIR)/lib-octavius/octLexer.ml.d: $(BUILDIR)/lib-octavius/octLexer.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octLexer-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octLexer.ml > $(BUILDIR)/lib-octavius/octLexer.ml.d'; \
        else echo 'octLexer.ml.d             [32m<=[m [01mdep[m unit-octLexer-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octLexer-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octLexer.ml > $(BUILDIR)/lib-octavius/octLexer.ml.d

$(BUILDIR)/lib-octavius/octLexer.cmo:  \
    $(BUILDIR)/lib-octavius/octLexer.ml.d \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octLexer.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octLexer-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octLexer.ml'; \
        else echo 'octLexer.cmo              [32m<=[m [01mcompile-byte[m unit-octLexer-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octLexer-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octLexer.ml

$(BUILDIR)/lib-octavius/octLexer.cmx:  \
    $(BUILDIR)/lib-octavius/octLexer.ml.d \
    $(BUILDIR)/lib-octavius/octLexer.cmi \
    $(BUILDIR)/lib-octavius/octLexer.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-octLexer-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octLexer.ml'; \
        else echo 'octLexer.cmx              [32m<=[m [01mcompile-native[m unit-octLexer-lib-octavius'; fi
	@$(OCAMLOPT) -c $(unit-octLexer-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octLexer.ml

$(BUILDIR)/lib-octavius/octavius.mli: src/octavius.mli \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octavius.mli $(BUILDIR)/lib-octavius/octavius.mli'; \
        else echo 'octavius.mli              [32m<=[m [01mprepare[m unit-octavius-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octavius.mli $(BUILDIR)/lib-octavius/octavius.mli

$(BUILDIR)/lib-octavius/octavius.cmli-byte: $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.mli $(BUILDIR)/lib-octavius/octavius.cmli-byte'; \
        else echo 'octavius.cmli-byte        [32m<=[m [01mpp-byte[m unit-octavius-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.mli $(BUILDIR)/lib-octavius/octavius.cmli-byte

$(BUILDIR)/lib-octavius/octavius.cmli-native: $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.mli $(BUILDIR)/lib-octavius/octavius.cmli-native'; \
        else echo 'octavius.cmli-native      [32m<=[m [01mpp-native[m unit-octavius-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.mli $(BUILDIR)/lib-octavius/octavius.cmli-native

$(BUILDIR)/lib-octavius/octavius.mli.d: $(BUILDIR)/lib-octavius/octavius.cmli-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octavius-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octavius.cmli-byte > $(BUILDIR)/lib-octavius/octavius.mli.d'; \
        else echo 'octavius.mli.d            [32m<=[m [01mdep[m unit-octavius-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octavius-lib-octavius.dep) -intf $(BUILDIR)/lib-octavius/octavius.cmli-byte > $(BUILDIR)/lib-octavius/octavius.mli.d

$(BUILDIR)/lib-octavius/octavius.cmi:  \
    $(BUILDIR)/lib-octavius/octavius.cmli-byte \
    $(BUILDIR)/lib-octavius/octavius.mli.d
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octavius-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octavius.cmli-byte'; \
        else echo 'octavius.cmi              [32m<=[m [01mcompile-byte[m unit-octavius-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octavius-lib-octavius.compile-byte) -intf $(BUILDIR)/lib-octavius/octavius.cmli-byte

$(BUILDIR)/lib-octavius/octavius.ml: src/octavius.ml \
    | $(BUILDIR)/lib-octavius/
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/src/octavius.ml $(BUILDIR)/lib-octavius/octavius.ml'; \
        else echo 'octavius.ml               [32m<=[m [01mprepare[m unit-octavius-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/src/octavius.ml $(BUILDIR)/lib-octavius/octavius.ml

$(BUILDIR)/lib-octavius/octavius.cml-byte: $(BUILDIR)/lib-octavius/octavius.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.ml $(BUILDIR)/lib-octavius/octavius.cml-byte'; \
        else echo 'octavius.cml-byte         [32m<=[m [01mpp-byte[m unit-octavius-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.ml $(BUILDIR)/lib-octavius/octavius.cml-byte

$(BUILDIR)/lib-octavius/octavius.cml-native: $(BUILDIR)/lib-octavius/octavius.ml
	@if test -n "$$VERBOSE"; \
        then echo '$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.ml $(BUILDIR)/lib-octavius/octavius.cml-native'; \
        else echo 'octavius.cml-native       [32m<=[m [01mpp-native[m unit-octavius-lib-octavius'; fi
	@$(LN) $(ROOTDIR)/$(BUILDIR)/lib-octavius/octavius.ml $(BUILDIR)/lib-octavius/octavius.cml-native

$(BUILDIR)/lib-octavius/octavius.ml.d: $(BUILDIR)/lib-octavius/octavius.cml-byte \
    |  \
    $(BUILDIR)/lib-octavius/octErrors.ml \
    $(BUILDIR)/lib-octavius/octPrint.ml \
    $(BUILDIR)/lib-octavius/octavius.ml \
    $(BUILDIR)/lib-octavius/octTypes.mli \
    $(BUILDIR)/lib-octavius/octErrors.mli \
    $(BUILDIR)/lib-octavius/octPrint.mli \
    $(BUILDIR)/lib-octavius/octParser.ml \
    $(BUILDIR)/lib-octavius/octLexer.ml \
    $(BUILDIR)/lib-octavius/octavius.mli
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLDEP) $(unit-octavius-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octavius.cml-byte > $(BUILDIR)/lib-octavius/octavius.ml.d'; \
        else echo 'octavius.ml.d             [32m<=[m [01mdep[m unit-octavius-lib-octavius'; fi
	@$(OCAMLDEP) $(unit-octavius-lib-octavius.dep) -impl $(BUILDIR)/lib-octavius/octavius.cml-byte > $(BUILDIR)/lib-octavius/octavius.ml.d

$(BUILDIR)/lib-octavius/octavius.cmo:  \
    $(BUILDIR)/lib-octavius/octavius.ml.d \
    $(BUILDIR)/lib-octavius/octavius.cml-byte \
    $(BUILDIR)/lib-octavius/octavius.cmi
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLC) -c $(unit-octavius-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octavius.cml-byte'; \
        else echo 'octavius.cmo              [32m<=[m [01mcompile-byte[m unit-octavius-lib-octavius'; fi
	@$(OCAMLC) -c $(unit-octavius-lib-octavius.compile-byte) -impl $(BUILDIR)/lib-octavius/octavius.cml-byte

$(BUILDIR)/lib-octavius/octavius.cmx:  \
    $(BUILDIR)/lib-octavius/octavius.ml.d \
    $(BUILDIR)/lib-octavius/octavius.cmi \
    $(BUILDIR)/lib-octavius/octavius.cml-native
	@if test -n "$$VERBOSE"; \
        then echo '$(OCAMLOPT) -c $(unit-octavius-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octavius.cml-native'; \
        else echo 'octavius.cmx              [32m<=[m [01mcompile-native[m unit-octavius-lib-octavius'; fi
	@$(OCAMLOPT) -c $(unit-octavius-lib-octavius.compile-native) -impl $(BUILDIR)/lib-octavius/octavius.cml-native

-include Makefile.assemble
ifneq ($(filter-out clean help distclean,$(MAKECMDGOALS)),)
-include  \
    $(BUILDIR)/lib-octavius/octTypes.mli.d \
    $(BUILDIR)/lib-octavius/octErrors.ml.d \
    $(BUILDIR)/lib-octavius/octErrors.mli.d \
    $(BUILDIR)/lib-octavius/octCommon.ml.d \
    $(BUILDIR)/lib-octavius/octCommon.mli.d \
    $(BUILDIR)/lib-octavius/octPrint.ml.d \
    $(BUILDIR)/lib-octavius/octPrint.mli.d \
    $(BUILDIR)/lib-octavius/octParser.ml.d \
    $(BUILDIR)/lib-octavius/octParser.mli.d \
    $(BUILDIR)/lib-octavius/octLexer.ml.d \
    $(BUILDIR)/lib-octavius/octLexer.mli.d \
    $(BUILDIR)/lib-octavius/octavius.ml.d \
    $(BUILDIR)/lib-octavius/octavius.mli.d
endif
include 
